<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.john.mb.dao.EmpDao2">
    <cache />
    <!--方式一-->
<!--    <resultMap id="emp" type="com.john.mb.bean.Emp">
        <id column="id" property="id"/>
        <result column="ename" property="ename"/>
        <result column="job" property="job"/>
        <result column="deptno" property="dept.deptno"/>
        <result column="deptname" property="dept.deptname"/>
        <result column="dloc" property="dept.dloc"/>
    </resultMap>-->

    <!--方式二-->

    <resultMap id="emp" type="com.john.mb.bean.Emp">
        <id column="id" property="id"/>
        <result column="ename" property="ename"/>
        <result column="job" property="job"/>
        <!--此处javaType不指定也可以-->
        <association property="dept" javaType="com.john.mb.bean.Dept">
            <id column="deptno" property="deptno"/>
            <result column="deptname" property="deptname"/>
            <result column="dloc" property="dloc"/>
        </association>

    </resultMap>
    <select id="selectByDeptno" resultMap="emp">
        select * from emp left join dept on emp.deptno = dept.deptno where empno=#{e}
    </select>
    <select id="selectByDeptnoStep" resultType="com.john.mb.bean.Dept">
        select * from emp where deptno=#{e}
    </select>


<!--    <select id="select" resultType="com.john.mb.bean.Emp">-->
<!--        select * from emp-->
<!--        <where>-->
<!--            <if test="empno != null">-->
<!--                empno = #{empno}-->
<!--            </if>-->
<!--            <if test="ename != null">-->
<!--                and ename = #{ename}-->
<!--            </if>-->

<!--        </where>-->
<!--    </select>-->
    <!--
    trim 自定义 where格式
    prefix 为trim中的语句整体添加前缀
    suffix 为trim中的语句整体添加后缀
    suffixOverrides 去除整体语句中前面多余的字符
    suffixOverrides 去除整体语句中后面多余的字符
    -->
    <select id="select" resultType="com.john.mb.bean.Emp">
        select * from emp
            <trim prefix="where" prefixOverrides="and |or" suffixOverrides="and |or">
                <if test="empno != null">
                     empno = #{empno} and
                </if>
                <if test="ename != null">
                     ename = #{ename} and
                </if>
            </trim>

    </select>

    <!--
        foreach 表示遍历输入的参数
        collection 表示遍历的参数名， 与接口中定义的方法@Param("")，相同
        open 以什么开头
        close 以什么结束
        separator 以什么分隔
        item 表示遍历中的每一个元素值类型（对应的列名）
        index 表示索引，随便写，不知道有什么用。
    -->
    <select id="selectIn" resultType="com.john.mb.bean.Emp">
        select * from emp where deptno in
        <foreach collection="deptnos" open="(" close=")" separator="," item="deptno" index="1">
            #{deptno}
        </foreach>
    </select>

    <!--mybatis中的缓存机制
        如果没有缓存，每次查询都会去从数据库中获取，会有性能问题，所以在多数情况下，连续执行两条相同的sql语句，
        可以直接从缓存中获取， 如果获取不到，可以再去查询数据库，这意味这完成的结果需要放到缓存中。

        分类：
        1. 一级缓存 表示sqlSession级别的缓存，每次查询会开启一个会话，此会话会相当于一个连接，关闭之后自动失效
        2. 二级缓存 全局范围内的缓存，sqlSession关闭之后生效
        3.第三方缓存 继承第三方组件，来充当缓存作用。

        一级缓存
            在一个会话内执行多个相同的sql语句，除了第一个外，其他都会在缓存中查询。
                sql语句相同，包括参数值相同， 且对象中的值相同才会去查询缓存。
                某些情况下，一级缓存可能会失效。
                    inert delete update 会刷新同一会话中的所有缓存, 已开启的其他会话缓存不受影响
                如果手动去改数据库，不经过mybatis，缓存不会失效。
        二级缓存：

            1. <setting name="cacheEnabled" value="true"/>
                settings中的  cacheEnabled 默认是true
            2. 需要在mapper文件中使用 <cache/> 整个文件生效
                cache中有对应参数

        -->

    <update id="update">

        update emp set ename= "sss" where empno= #{empno}
    </update>

</mapper>